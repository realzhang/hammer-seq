#!/usr/bin/perl
use warnings;
use strict;
$|++;
use Getopt::Long;
use Cwd;

## This program is Copyright (C) 2015-16, Ming-an Sun (mingansun@gmail.com)

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.


my @filenames;
my %counting;
my $parent_dir = getcwd();

my %fhs;

my $version = '1.1';
my ($report,$merge_non_CpG) = process_commandline();

process_HBS_mapper_results();

sub process_commandline{
    my $help;
    my $report;
    my $extractor_version;
    my $merge_non_CpG;

    my $command_line = GetOptions ('help|man' => \$help,
                 'report'       => \$report,
                 'version'      => \$extractor_version,
                 'merge_non_CpG'=> \$merge_non_CpG, 
                );

    ### EXIT ON ERROR if there were errors with any of the supplied options
    unless ($command_line){
        die "Please respecify command line options\n";
    }

    ### help
    if ($help || @ARGV==0){
        print_help();
        exit;
    }

    if ($extractor_version){
        print "\nHBS Methylation Extractor (Version: $version)\n";
        exit;
    }

    @filenames = @ARGV;

    warn "\n" . '=' x 80 . "\n";
    warn "*** HBS methylation extractor version $version ***\n\n";
    warn "\n" . '=' x 80 . "\n";
  
    ### PRINT A REPORT
    unless ($report){
        $report = 0;
    }

    ### MERGE NON-CpG context
    unless ($merge_non_CpG){
        $merge_non_CpG = 0;
    }

    return ($report,$merge_non_CpG);
}

sub process_HBS_mapper_results{


    if ($merge_non_CpG){
        warn "Merge CHG and CHH context to non-CpG context specified\n";
    }
    warn "\n";

    sleep (1);

    foreach my $filename (@filenames){
        %fhs = ();
        %counting =(
            total_meCHG_count => 0,
            total_meCHH_count => 0,
            total_meCpG_count => 0,
            total_unmethylated_CHG_count => 0,
            total_unmethylated_CHH_count => 0,
            total_unmethylated_CpG_count => 0,
            sequences_count => 0,
        );
        warn "\nNow reading in HBS_mapper result file $filename\n\n";
        # enable gz file reading
        if($filename =~ /\.gz$/){
            open (IN,"gunzip -c $filename |") or die "Can't open gunzip pipe to file $filename: $!\n";
        }else{
            open (IN,$filename) or die "Can't open file $filename: $!\n";
        }

        my $output_filename = (split (/\//,$filename))[-1];

        ### OPENING OUTPUT-FILEHANDLES
        if ($report){
            my $report_filename = $output_filename;
            $report_filename =~ s/$/_splitting_report.txt/;
            open (REPORT,'>',$report_filename) or die "Failed to write to file $report_filename $!\n";
        
            print REPORT "$output_filename\n\n";
            print REPORT "Parameters used to extract methylation information:\n";

            print REPORT "HBS_mapper result file: single-end (SAM format)\n"; # default

            if ($merge_non_CpG){
                print REPORT "Methylation in CHG and CHH context will be merged into \"non-CpG context\" output\n";
            }

            print REPORT "\n";
        }

        ### CpG-context and non-CpG context. THIS SECTION IS OPTIONAL
        if ($merge_non_CpG){
            my $cpg_output = my $other_c_output = $output_filename;
            ### C in CpG context
            $cpg_output =~ s/^/CpG_context_/;
            $cpg_output =~ s/$/.txt/ unless ($cpg_output =~ /\.txt$/);
            open ($fhs{CpG_context},'>',$cpg_output) or die "Failed to write to $cpg_output $! \n";
            print "Writing result file containing methylation information for C in CpG context to $cpg_output\n";
            print {$fhs{CpG_context}} "HBS methylation extractor version $version\n";

            ### C in any other context than CpG
            $other_c_output =~ s/^/Non_CpG_context_/;
            $other_c_output =~ s/$/.txt/ unless ($other_c_output =~ /\.txt$/);
            open ($fhs{other_context},'>',$other_c_output) or die "Failed to write to $other_c_output $!\n";
            print "Writing result file containing methylation information for C in any other context to $other_c_output\n";
            print {$fhs{other_context}} "HBS methylation extractor version $version\n";
        }
        ### THIS SECTION IS THE DEFAULT (CpG, CHG and CHH context)
        else{
            my $cpg_output = my $chg_output =  my $chh_output = $output_filename;
            ### C in CpG context
            $cpg_output =~ s/^/CpG_context_/;
            $cpg_output =~ s/$/.txt/ unless ($cpg_output =~ /\.txt$/);
            open ($fhs{CpG_context},'>',$cpg_output) or die "Failed to write to $cpg_output $! \n";
            print "Writing result file containing methylation information for C in CpG context to $cpg_output\n";
            print {$fhs{CpG_context}} "HBS methylation extractor version $version\n";

            ### C in CHG context
            $chg_output =~ s/^/CHG_context_/;
            $chg_output =~ s/$/.txt/ unless ($chg_output =~ /\.txt$/);
            open ($fhs{CHG_context},'>',$chg_output) or die "Failed to write to $chg_output $!\n";
            print "Writing result file containing methylation information for C in CHG context to $chg_output\n";
            print {$fhs{CHG_context}} "HBS methylation extractor version $version\n";

            ### C in CHH context
            $chh_output =~ s/^/CHH_context_/;
            $chh_output =~ s/$/.txt/ unless ($chh_output =~ /\.txt$/);
            open ($fhs{CHH_context},'>',$chh_output) or die "Failed to write to $chh_output $!\n";
            print "Writing result file containing methylation information for C in CHH context to $chh_output\n";
            print {$fhs{CHH_context}} "HBS methylation extractor version $version\n";   
        }

        my $methylation_call_strings_processed = 0;
        my $line_count = 0;

        ### PROCESSING SINGLE-END RESULT FILES

        # processing single-end SAM format (default)
        while (<IN>){
            ### SAM format can either start with header lines (starting with @) or start with alignments directly
            if (/^\@/){ # skipping header lines (starting with @)
                warn "skipping SAM header line:\t$_";
                next;
            }

            ++$line_count;
            warn "Processed lines: $line_count\n" if ($line_count%500000==0);
    
            # example read in SAM format
            #HWI-ST958:96:1:1101:1545:2223#0/#/1     0       chr6    105422734       255     101M    *       0       0       TTTATTTTTTTTTTTATAAGTTTTAGTGTTTTTGGTTTTATGTGAGGATTTTTGTTTTTTTTAGTTTTGATTTTAGTATAAGGAGATAAGTTTGGATCGTT IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIINM:i:25  XX:Z:CCC1C3C1CC1C9C5C1C15T1CC3A1CCAC4A5CC6C12A7A1       XM:Z:hhh.h...h.hh.h.........x.....h.x.................hh.....hh.h..........hh......h..................Z...    XR:Z:CT XG:Z:CT
            #HWI-ST958:96:1:1101:1545:2223#0/#/2     0       chr6    105422734       255     101M    *       0       0       CCCACTTTCTCCTCTATAAATTTCAATATCTCTAATTTTATATAAAATTCCTTAATCCACTTAAATTTAACCTTAATACAAAAAAATAAATATAAATCGAT IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIINM:i:19  XX:Z:CCC1C3C1CC1C9C5C1C15T1CC3A1CCAC4A5CC6C12A7A1       XM:Z:...................h.....x.h.....xh......h.h.hh......h.........h....h......h.....hh.h....h...hh...Z..    XR:Z:GA XG:Z:GA
            #HWI-ST958:96:1:1101:1917:2145#0/#/1     16      chr18   69545639        255     101M    *       0       0       TTCCCTTCTCATAACCTAACTCGTTATAAACGCTACCCTAACTTAAAAATAAACAAACAAAATAAACATATACTATAAACAACCATAAAAATCTAACGANT IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIINM:i:20  XX:Z:12G4GG6G1G6G4G4G1G8G7G1G5G4GG3G4G8G2GA1    XM:Z:............h....xh...Z..h.h...Z..x....x....h.h........x.......h.h.....h....hh...x....h........h.Zx..    XR:Z:CT XG:Z:CT
            #HWI-ST958:96:1:1101:1917:2145#0/#/2     16      chr18   69545639        255     101M    *       0       0       TTTTTTTTTTATGATTTGGTTCGTTGTGAACGTTGTTTTGACTTGAGAATAAATAGATAAAATGAGCATATGTTATGGATAGTTATGAAAATTTAGCGGAT IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIINM:i:19  XX:Z:12G4GG6G1G6G4G4G1G8G7G1G5G4GG3G4G8G2GA1    XM:Z:..hhh..h.h....hx...h.Z........Z.x..hhx...H...........x...h........H.....h......x..hh........h...Z....    XR:Z:GA XG:Z:GA

            my ($id,$flag,$chrom,$start,$meth_call,$read_conversion,$genome_conversion) = (split("\t"))[0,1,2,3,13,14,15];
            $meth_call =~ s/^XM:Z://;
            $read_conversion =~ s/^XR:Z://;
            $genome_conversion =~ s/^XG:Z://;    
      
            # checking strand
            my $direction;
            if($flag == 0){
                $direction = "+";
            }elsif($flag == 16){
                $direction = "-";
            }else{
                warn "The flag of SAM file is expected to be 0 or 16\n";
                exit;
            }
            
            chomp $genome_conversion;
      
            my $index;
            if ($meth_call){
                if ($read_conversion eq 'CT' and $genome_conversion eq 'CT'){ ## original top strand
                    $index = 0;
                #    $strand = '+';
                }elsif ($read_conversion eq 'GA' and $genome_conversion eq 'GA'){ ## complementary to original bottom strand
                    $index = 1;
                #    $strand = '+';
                }else {
                    die "Unexpected combination of read and genome conversion: $read_conversion / $genome_conversion\n";
                }
    
                ### If the read is in SAM format we need to reverse the methylation call if the read has been reverse-complemented for the output
                #if ($strand eq '-'){
                #    $meth_call = reverse $meth_call;
                #}
    
            }
            ### printing out the methylation state of every C in the read
            print_individual_C_methylation_states($meth_call,$chrom,$start,$id,$direction,$index);
    
            ++$methylation_call_strings_processed; # 1 per single-end result
        }

        print "\n\nProcessed $line_count lines from $filename in total\n";
        print "Total number of methylation call strings processed: $methylation_call_strings_processed\n\n";
        if ($report){
            print REPORT "Total number of methylation call strings processed: $methylation_call_strings_processed\n\n";
        }
        print_splitting_report();
    }
}


sub print_splitting_report{

    ### Calculating methylation percentages if applicable

    my $percent_meCpG;
    if (($counting{total_meCpG_count}+$counting{total_unmethylated_CpG_count}) > 0){
        $percent_meCpG = sprintf("%.1f",100*$counting{total_meCpG_count}/($counting{total_meCpG_count}+$counting{total_unmethylated_CpG_count}));
    }

    my $percent_meCHG;
    if (($counting{total_meCHG_count}+$counting{total_unmethylated_CHG_count}) > 0){
        $percent_meCHG = sprintf("%.1f",100*$counting{total_meCHG_count}/($counting{total_meCHG_count}+$counting{total_unmethylated_CHG_count}));
    }

    my $percent_meCHH;
    if (($counting{total_meCHH_count}+$counting{total_unmethylated_CHH_count}) > 0){
        $percent_meCHH = sprintf("%.1f",100*$counting{total_meCHH_count}/($counting{total_meCHH_count}+$counting{total_unmethylated_CHH_count}));
    }

    my $percent_non_CpG_methylation;
    if ($merge_non_CpG){
        if ( ($counting{total_meCHH_count}+$counting{total_unmethylated_CHH_count}+$counting{total_meCHG_count}+$counting{total_unmethylated_CHG_count}) > 0){
            $percent_non_CpG_methylation = sprintf("%.1f",100* ( $counting{total_meCHH_count}+$counting{total_meCHG_count} ) / ( $counting{total_meCHH_count}+$counting{total_unmethylated_CHH_count}+$counting{total_meCHG_count}+$counting{total_unmethylated_CHG_count} ) );
        }
    }

    if ($report){
        ### detailed information about Cs analysed
        print REPORT "Final Cytosine Methylation Report\n",'='x33,"\n";

        my $total_number_of_C = $counting{total_meCHG_count}+$counting{total_meCHH_count}+$counting{total_meCpG_count}+$counting{total_unmethylated_CHG_count}+$counting{total_unmethylated_CHH_count}+$counting{total_unmethylated_CpG_count};
        print REPORT "Total number of C's analysed:\t$total_number_of_C\n\n";

        print REPORT "Total methylated C's in CpG context:\t$counting{total_meCpG_count}\n";
        print REPORT "Total methylated C's in CHG context:\t$counting{total_meCHG_count}\n";
        print REPORT "Total methylated C's in CHH context:\t$counting{total_meCHH_count}\n\n";

        print REPORT "Total C to T conversions in CpG context:\t$counting{total_unmethylated_CpG_count}\n";
        print REPORT "Total C to T conversions in CHG context:\t$counting{total_unmethylated_CHG_count}\n";
        print REPORT "Total C to T conversions in CHH context:\t$counting{total_unmethylated_CHH_count}\n\n";

        ### calculating methylated CpG percentage if applicable
        if ($percent_meCpG){
            print REPORT "C methylated in CpG context:\t${percent_meCpG}%\n";
        }else{
            print REPORT "Can't determine percentage of methylated Cs in CpG context if value was 0\n";
        }

        ### 2-Context Output
        if ($merge_non_CpG){
            if ($percent_non_CpG_methylation){
                print REPORT "C methylated in non-CpG context:\t${percent_non_CpG_methylation}%\n\n\n";
            }else{
                print REPORT "Can't determine percentage of methylated Cs in non-CpG context if value was 0\n\n\n";
            }
        }

        ### 3 Context Output
        else{
            ### calculating methylated CHG percentage if applicable
            if ($percent_meCHG){
                print REPORT "C methylated in CHG context:\t${percent_meCHG}%\n";
            }else{
                print REPORT "Can't determine percentage of methylated Cs in CHG context if value was 0\n";
            }

            ### calculating methylated CHH percentage if applicable
            if ($percent_meCHH){
                print REPORT "C methylated in CHH context:\t${percent_meCHH}%\n\n\n";
            }else{
                print REPORT "Can't determine percentage of methylated Cs in CHH context if value was 0\n\n\n";
            }
        }
    }

    ### detailed information about Cs analysed for on-screen report
    print "Final Cytosine Methylation Report\n",'='x33,"\n";

    my $total_number_of_C = $counting{total_meCHG_count}+$counting{total_meCHH_count}+$counting{total_meCpG_count}+$counting{total_unmethylated_CHG_count}+$counting{total_unmethylated_CHH_count}+$counting{total_unmethylated_CpG_count};
    print "Total number of C's analysed:\t$total_number_of_C\n\n";

    print "Total methylated C's in CpG context:\t$counting{total_meCpG_count}\n";
    print "Total methylated C's in CHG context:\t$counting{total_meCHG_count}\n";
    print "Total methylated C's in CHH context:\t$counting{total_meCHH_count}\n\n";

    print "Total C to T conversions in CpG context:\t$counting{total_unmethylated_CpG_count}\n";
    print "Total C to T conversions in CHG context:\t$counting{total_unmethylated_CHG_count}\n";
    print "Total C to T conversions in CHH context:\t$counting{total_unmethylated_CHH_count}\n\n";

    ### printing methylated CpG percentage if applicable
    if ($percent_meCpG){
        print "C methylated in CpG context:\t${percent_meCpG}%\n";
    }else{
        print "Can't determine percentage of methylated Cs in CpG context if value was 0\n";
    }

    ### 2-Context Output
    if ($merge_non_CpG){
        if ($percent_non_CpG_methylation){
            print "C methylated in non-CpG context:\t${percent_non_CpG_methylation}%\n\n\n";
        }else{
            print "Can't determine percentage of methylated Cs in non-CpG context if value was 0\n\n\n";
        }
    }

    ### 3-Context Output
    else{
        ### printing methylated CHG percentage if applicable
        if ($percent_meCHG){
            print "C methylated in CHG context:\t${percent_meCHG}%\n";
        }else{
            print "Can't determine percentage of methylated Cs in CHG context if value was 0\n";
        }

        ### printing methylated CHH percentage if applicable
        if ($percent_meCHH){
            print "C methylated in CHH context:\t${percent_meCHH}%\n\n\n";
        }else{
            print "Can't determine percentage of methylated Cs in CHH context if value was 0\n\n\n";
        }
    }
}

sub print_individual_C_methylation_states{

    my ($meth_call,$chrom,$start,$id,$direction,$filehandle_index) = @_;
    my @methylation_calls = split(//,$meth_call);

    #################################################################
    ### . for bases not involving cytosines                       ###
    ### X for methylated C in CHG context (was protected)         ###
    ### x for not methylated C in CHG context (was converted)     ###
    ### H for methylated C in CHH context (was protected)         ###
    ### h for not methylated C in CHH context (was converted)     ###
    ### Z for methylated C in CpG context (was protected)         ###
    ### z for not methylated C in CpG context (was converted)     ###
    #################################################################

    my $methyl_CHG_count = 0;
    my $methyl_CHH_count = 0;
    my $methyl_CpG_count = 0;
    my $unmethylated_CHG_count = 0;
    my $unmethylated_CHH_count = 0;
    my $unmethylated_CpG_count = 0;

    my $strand;
    if($direction eq '+' && $filehandle_index == 0){
        $strand = '+';
    }elsif($direction eq '+' && $filehandle_index == 1){
        $strand = '-';
    }elsif($direction eq '-' && $filehandle_index == 0){
        $strand = '-';
    }elsif($direction eq '-' && $filehandle_index == 1){
        $strand = '+';
    }else{
        warn "Strand information cannot be generated\n";
        exit;
    }
    
    ### THIS IS THE CpG and Non-CpG SECTION (OPTIONAL)
    
    ### single-file CpG and other-context output
    if ($merge_non_CpG) {
        for my $index (0..$#methylation_calls) {
            ### methylated Cs (any context) will receive a forward (+) orientation
            ### not methylated Cs (any context) will receive a reverse (-) orientation
            if ($methylation_calls[$index] eq 'X') {
                $counting{total_meCHG_count}++;
                print {$fhs{other_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq 'x') {
                $counting{total_unmethylated_CHG_count}++;
                print {$fhs{other_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq 'Z') {
                $counting{total_meCpG_count}++;
                print {$fhs{CpG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq 'z') {
                $counting{total_unmethylated_CpG_count}++;
                print {$fhs{CpG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq 'H') {
                $counting{total_meCHH_count}++;
                print {$fhs{other_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq 'h') {
                $counting{total_unmethylated_CHH_count}++;
                print {$fhs{other_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif ($methylation_calls[$index] eq '.') {
                ;
            }else{
                die "The methylation call string contained the following unrecognised character: $methylation_calls[$index]\n";
            }
        }
    }

    ### THIS IS THE 3-CONTEXT (CpG, CHG and CHH) DEFAULT SECTION
    else {
        for my $index (0..$#methylation_calls) {
            ### methylated Cs (any context) will receive a forward (+) orientation
            ### not methylated Cs (any context) will receive a reverse (-) orientation
            if($methylation_calls[$index] eq 'X') {
                $counting{total_meCHG_count}++;
                print {$fhs{CHG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq 'x') {
                $counting{total_unmethylated_CHG_count}++;
                print {$fhs{CHG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq 'Z') {
                $counting{total_meCpG_count}++;
                print {$fhs{CpG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq 'z') {
                $counting{total_unmethylated_CpG_count}++;
                print {$fhs{CpG_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq 'H') {
                $counting{total_meCHH_count}++;
                print {$fhs{CHH_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq 'h') {
                $counting{total_unmethylated_CHH_count}++;
                print {$fhs{CHH_context}} join ("\t",$id,$chrom,$strand,$start+$index,$methylation_calls[$index]),"\n";
            }elsif($methylation_calls[$index] eq '.') {
                ;
            }else{
                die "The methylation call string contained the following unrecognised character: $methylation_calls[$index]\n";
            }
        }
    }
}

sub print_help{

print << 'HOW_TO';

USAGE: hbs_methylation_extractor [options] <filenames>


ARGUMENTS:

<filenames>              A space-separated list of HBS_mapper result files in SAM format

OPTIONS:

--merge_non_CpG          This will produce two output files for Cs in
                          - CpG context
                          - non-CpG context

--report                 Prints out a short methylation summary as well as the paramaters used to run
                         this script.

--version                Displays version information.

-h/--help                Displays this help file and exits.


This script was last modified on Nov 22, 2015.

HOW_TO
}
